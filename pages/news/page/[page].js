import Head from 'next/head'
import { useRouter } from 'next/router'
import { dehydrate, QueryClient, useQuery } from 'react-query';

import { Pagination } from '../../../components/pagination'

const defaultQueryConfig = {
  page: '1',
  limit: 3,
  _sort: 'desc'
}

async function getNews({ page, limit, _sort }) {
  const res = await fetch(`http://localhost:1337/articles?_start=${(page - 1) * limit}&_limit=${limit}&_sort=published_at:${_sort}`)
  const data = await res.json()

  return data
}

export default function Page({ page, count }) {
  const router = useRouter()

  const query = {
    ...defaultQueryConfig,
    ...router.query,
    page,
  }

  // This useQuery could just as well happen in some deeper child to
  // the "Posts"-page, data will be available immediately either way
  const { data } = useQuery(['news', query],
    () => getNews(query)
  )

  const sortDirection = router.query._sort ? router.query._sort : null

  return (
    <div className="flex justify-center m-auto max-w-2xl">
      <Head>
        <title>Pagination Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="mmy-16 text-2xl text-pink-900 text-center ">
          Pagination Test
        </h1>

        <p className="flex justify-between gap-6 my-8">
          <button
            onClick={() => {
              router.push('/news/page/1?_sort=asc')
            }}
            className={`p-2 flex-1 text-center hover:bg-pink-500 hover:text-white ${sortDirection === 'asc' ? 'bg-black text-pink-500' : 'bg-gray-200'}`}
          >
            Ascending
          </button>
          <button
            onClick={() => {
              router.push('/news/page/1?_sort=desc')
            }}
            className={`p-2 flex-1 text-center hover:bg-pink-500 hover:text-white ${sortDirection === 'desc' ? 'bg-black text-pink-500' : 'bg-gray-200'}`}
          >
            Descending
          </button>
        </p>

        {data ? (
          <ul className="divide-gray-800 space-y-10 my-16">
            {data.map(item => (
              <li key={item.id}>{item.heading}</li>
            ))}
          </ul>
        ) : ''}


        <Pagination {...query} count={count} />

      </main>

    </div>
  )
}



export async function getStaticPaths() {
  // Get post count tow work out how many routes
  // we need for
  const res = await fetch('http://localhost:1337/articles/count')
  const count = await res.json()

  const numberOfPages = Math.ceil(count / defaultQueryConfig.limit);

  const paths = []
  for (let i = 1; i <= numberOfPages; i++) {
    paths.push({ params: { page: i.toString(), count } })
  }

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

export async function getStaticProps({ params }) {
  // get count again - no way to from getStaticPaths
  const countRes = await fetch('http://localhost:1337/articles/count')
  const count = await countRes.json()

  // params contains the page.
  // If the route is like /page/2, then params.params is 2
  const { page } = params
  const query = {
    ...defaultQueryConfig,
    page,
  }

  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(['news', query], () => getNews(defaultQueryConfig))

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      ...query,
      count
    }
  }
}

